name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  gitleaks:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  terraform:
    name: "Terraform"
    needs:
      - "gitleaks"
    runs-on: ubuntu-latest
    env:
      GOOGLE_APPLICATION_CREDENTIALS: gcp.json
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load secret
        uses: 1password/load-secrets-action@v1
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          TF_VAR_BACKEND_USERNAME: op://gha-kozaktomas-infra/tf-backend/user
          TF_VAR_BACKEND_TOKEN: op://gha-kozaktomas-infra/tf-backend/token
          TF_VAR_GOOGLE_PROJECT_ID: op://gha-kozaktomas-infra/gcloud/project_id
          GOOGLE_JSON_CONTENT: op://gha-kozaktomas-infra/gcloud/json
          TF_VAR_CLOUDFLARE_ACCOUNT_ID: op://gha-kozaktomas-infra/cloudflare/account_id
          TF_VAR_CLOUDFLARE_EMAIL: op://gha-kozaktomas-infra/cloudflare/email
          TF_VAR_CLOUDFLARE_API_KEY: op://gha-kozaktomas-infra/cloudflare/api_key
          TF_VAR_PLAYGROUND_VESELICE_ADMINS: op://gha-kozaktomas-infra/playground-veselice/admins
          TF_VAR_PLAYGROUND_VESELICE_DISCORD_URL: op://gha-kozaktomas-infra/playground-veselice/discord_hook
          TF_VAR_PLAYGROUND_VESELICE_JWT_SIGNING_KEY: op://gha-kozaktomas-infra/playground-veselice/jwt_signing_key
          TF_VAR_PLAYGROUND_VESELICE_JWT_PASSWORD_CHANGE_KEY: op://gha-kozaktomas-infra/playground-veselice/jwt_password_change_key
          TF_VAR_PLAYGROUND_VESELICE_REGISTRATION_CODE: op://gha-kozaktomas-infra/playground-veselice/registration_code

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Prepare GCP json auth file
        run: echo -n $GOOGLE_JSON_CONTENT > $GOOGLE_APPLICATION_CREDENTIALS

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="username=${TF_VAR_BACKEND_USERNAME}" -backend-config="password=${TF_VAR_BACKEND_TOKEN}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v5
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
